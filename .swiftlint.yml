# 参考1：https://juejin.cn/post/6844903576779620366#heading-12
# 参考2：https://juejin.cn/post/6844903576821727239#heading-32
# 所有使用规则可以在这里搜： https://realm.github.io/SwiftLint/force_unwrapping.html
# 所有规则： https://realm.github.io/SwiftLint/rule-directory.html

# disabled_rules: #禁用指定的规则
# opt_in_rules: #启动指定的规则
# whitelist_rules: #白名单规则，不能和上面两项混用
# included: #希望Lint检索的路径，SwiftLint会扫描该路径下的所有.swift后缀的文件
# excluded: #希望不要检索的路径,SwiftLint会无视掉该路径下的文件，一般比如Pods、Carthage或者一些三方库
# only_rules: 不可以和 disabled_rules 或者 opt_in_rules 并列。类似一个白名单，只有在这个列表中的规则才是开启的。


excluded:  # 执行 linting 时忽略的路径。 优先级比 `included` 更高。
  - Pods # 忽略通过CocoaPods倒入的第三方库

strict: false #如果值为 true，SwiftLint 将把所有警告都视为错误

# 1、变量名称
identifier_name:
  min_length:
    warning: 3
    error: 2
  max_length:
    warning: 40
    error: 60

# 2、{前应该有空格，如果是函数应该与函数名同一行
opening_brace:
  severity: warning
   #定义的函数是否允许多行展示，参数多的时候一般会多个参数换行对齐，所以设置为true。 如果设置为false，则多行函数会报错： Corrected Trailing Whitespace
  allow_multiline_func: true 

# 3、避免强制的类型转化， as!
force_cast:
    severity: error

# 4、未使用的闭包参数，可以使用_代替
unused_closure_parameter:
    severity: warning

# 5、每行最大长度
line_length:
    warning: 150
    error: 200

# 6、符号位置不对(, :等)
colon:
  severity: warning
  flexible_right_spacing: false  #符号右侧允许出现多个空格吗? 如let a:     Int = 1
  apply_to_dictionaries: true  # 规则应用到字典类型中


# 7、逗号后应该有空格，逗号前应该没有空格
comma:
  severity: warning

# 8、函数行数
function_body_length:
  warning: 70
  error: 100

#9、 类型名， 类型名应该只包含字母数字字符， 并且以大写字母开头，长度在3-40个字符
type_name:
  min_length:
    warning: 3
    error: 0
  max_length:
    warning: 40
    error: 1000
  excluded: [] # 不包含的目录
  allowed_symbols: [] # 允许的符号
  unallowed_symbols_severity: error # 出现不允许的符号，直接error
  validates_start_with_lowercase: error # 小写字母开头，直接error
  validate_protocols: true # 校验protocol

# 10、声明的成员属性，重写set、get时，必须先get、再set，保证前后顺序，很鸡肋
computed_accessors_order:
  severity: warning
  order: get_set

# 11、定义的类型，body行数不能太多, class、protocol、enum、struct等
# 由于项目中很多文件代码都很多，因此这个规则可以禁用掉
type_body_length:
  warning: 1000
  error: 1200

# 12、代码复杂度，如果function中循环、if语句较多、嵌套的较多，则会增加复杂度
cyclomatic_complexity:
  warning: 10
  error: 20
  ignores_case_statements: false

# 13、文件代码行数限制
file_length:
  warning: 1000
  error: 1200

# 14、返回值为空，不需要显示声明void
redundant_void_return:
  severity: warning
  include_closures: true # 包含闭包

# 15、不能有连续多个空行
vertical_whitespace:
  severity: warning
  max_empty_lines: 1

#16、tuple定义了太多的参数，代码可读性非常差
large_tuple:
    warning: 2
    error: 3

# 17、使用try! 方式
force_try:
  severity: error

# 18、可以使用运算符，提高代码易读性, 比如 a = a + 2, 建议改为 a += 2
shorthand_operator:
  severity: error

# 19、switch case语句中，case中至少有一条语句才使用fallthrough， 否则就使用case a, b: 方式
no_fallthrough_only:
  severity: warning

#20、if、switch中，禁止出现相同的判断条件
duplicate_conditions:
  severity: error

# 21、switch中不需要增加break， 默认是加上的
unneeded_break_in_switch:
  severity: warning

# 22、代码结尾不需要分号
trailing_semicolon:
  severity: warning

# 23、else、catch应该与前边的}在同一行，且前面得有空格
statement_position:
  severity: warning
  statement_mode: default

# 24、函数参数数量控制
function_parameter_count:
  warning: 5
  error: 8
  ignores_default_parameters: true

# 25、函数返回值的 ——> 前后得加空格
return_arrow_whitespace:
  severity: warning

# 26、声明可选类型并给默认值nil， 太多余了， 比如 var a: Int? = nil
redundant_optional_initialization:
  severity: warning

# 27、语法糖错误，比如：Array<Iny> 建议 [Iny], Dictionary<Int, String> 建议 [Int: String]
syntactic_sugar:
    severity: warning

# 28、使用type.random(in:)方式创建随机值，别用arc4random()了
legacy_random:
  severity: warning

# 29、重写的方式为空实现，则警告提示
unneeded_override:
  severity: warning
  affect_initializers: false

# 30、函数结尾得有一行空行
trailing_newline:
  severity: warning

# 31、if、guard语句判空时，禁止使用 if let _ = xxx， guard let _ = xxx， 建议使用!= nil
unused_optional_binding:
  severity: warning
  ignore_optional_try: false

# 32、控制语句, for，while，do，catch语句中的条件不能包含在()中
control_statement:
  severity: warning

# 33、嵌套层级不宜过深，类型嵌套至多一级结构， 函数语句嵌套至多五级结构
# nesting:
#   type_level:
#     warning: 1
#   function_level:
#     warning: 2
#   check_nesting_in_closures_and_statements: true
#   always_allow_one_type_in_functions: false
#   ignore_typealiases_and_associatedtypes: false

# 34、结构范围常数尽量分开、明确、具体， 不要使用OC的遗留整体常数 如: 用CGPoint.zero 不用CGPointZero
legacy_constant:
  severity: warning

# 35、protocol只能是class类型，以便可以设置weak引用
class_delegate_protocol:
  severity: warning

# 36、小括号包含大括号的不能用空格, 比如[1, 2].map({ $0 } )会有警告
closing_brace:
  severity: warning

# 37、闭包参数应该在同一行，不应该换行
closure_parameter_position:
  severity: warning

# 38、协议的init不建议使用，如let set = Set(arrayLiteral: 1, 2)、let set = Set.init(arrayLiteral: 1, 2)
compiler_protocol_init:
  severity: warning

# 39、阻止直接初始化导致的错误类型, 有类方法的,用类方法初始化(不建议直接init初始化)
discouraged_direct_init:
  severity: warning
  types: ["Bundle", "Bundle.init", "NSError", "NSError.init", "UIDevice", "UIDevice.init"]

# 40、泛型规则定义， 只能包含字母、数字，且以大写字符开头
generic_type_name:
    min_length:
      warning: 1
      error: 0
    max_length:
      warning: 20
      error: 1000
    excluded: []
    allowed_symbols: []
    unallowed_symbols_severity: error
    validates_start_with_lowercase: error

# 41、只读属性不用加get，直接return
implicit_getter:
  severity: warning

# 42、文件开头不要有空行
leading_whitespace:
  severity: error

# 43、不要使用oc遗留下来的函数CGRectGetWidth(someView.frame)
legacy_cggeometry_functions:
    severity: warning

# 44、不要使用oc遗留下来的常量， 如CGRectZero、CGRectInfinite等
legacy_constant:
  severity: error

# 45、MARK: 前后都要加上单个空格
mark:
  severity: warning

# 46、在定义字符串枚举的时候, 当字符串枚举值等于枚举名称时，可以不用赋值
redundant_string_enum_value:
  severity: error

# 47、定义多个参数函数时，如果多个参数换行，则要与第一个参数对齐
vertical_parameter_alignment:
  severity: error

# 48、列表遍历时，如果indes或item未使用，则不要使用.enumerated()。比如for (↓_, foo) in bar.enumerated() {}
unused_enumerated:
  severity: error

# 49、使用 swift 提供的 struct 构造函数， 避免使用OC遗留的构造函数 比如 CGPointMake(10, 10)， 建议CGPoint(x: 10, y: 10)
legacy_constructor:
  severity: warning

# 50、使用_ = foo() 代替 let _ = foo()
redundant_discardable_let:
  severity: warning

# 51、定义操作符时，操作符左右应该有空格, 比如func <| (lhs: Int, rhs: Int) -> Int {}
operator_whitespace:
  severity: warning

# 52、代码中存在toto时，必须解决掉
todo:
    severity: error
    only: [TODO, FIXME]

# 53、枚举中不应该出现相同的名称（可能名称相同、参数不同）
duplicate_conditions:
  severity: error

# 54、禁止重复的导入
duplicate_imports:
  severity: warning

# 55、for中单个if判断，可以使用for-where
for_where:
  severity: warning
  allow_for_as_filter: false

# 56、方法调用，不要在方法名和()之间增加空格
no_space_in_method_call:
  severity: warning

# 56、swiftlint注释的规范
invalid_swiftlint_command:
  severity: error

# 57、switch case对齐规则
switch_case_alignment:
  severity: warning
  indented_cases: false
  ignore_one_liners: false

# 58、使用#unavailable 或者 #available，不要有空的if语句实现
unavailable_condition:
  severity: warning

# 59、实现了属性变量的set，但新的值未使用报错
unused_setter_value:
  severity: warning


# 使用// swiftlint:disable legacy_constant方式禁用规则后，需要在下一行重新开启能力// swiftlint:enable legacy_constant,否则之后的代码都不再使用这种规则检测了
blanket_disable_command:
  severity: error


# 以下几个参数在opt_in_rules中开启了规则，同时在这个位置配置相关参数
weak_delegate: # 看起来没生效
  severity: error

multiline_arguments:
    severity: error
    first_argument_location: any_line
    only_enforce_after_first_closure_on_first_line: false

vertical_parameter_alignment_on_call:
  severity: error


# 默认未开启的能力，需要在opt_in_rules中开启
opt_in_rules:
  # 闭包前后的{}需要缩进对齐
  - closure_end_indentation

  #判断为空，禁止使用count == 0, 建议使用isEmpty
  - empty_count

  #在闭包的{}中间要有一个空格,如map({ $0 })
  - closure_spacing

  # if语句和实现不能在同一行，比如if true { print("") },
#  - conditional_returns_on_newline

  # 建议使用隐式返回闭包; 如: foo.map({ $0 + 1 })， 不需要显示return $0 + 1
  - implicit_return

  # 声明变量时，不用显式声明为必选类型!, 比如var int: Int! = 42
  - implicitly_unwrapped_optional

  # joined方法使用默认分隔符时(空字符串), 建议使用joined()方法, 而不是joined(separator: "")方法
  - joined_default_parameter

  # let、var声明的变量与其它逻辑增加空白行间隔开
  - let_var_whitespace

  # 字典和数组的开头和结尾要有相同的缩进格式
  - literal_expression_end_indentation

  # 函数调用，参数都在同一行，或者一行一个参数
  - multiline_arguments

  # 定义函数时， 参数都在同一行，或者一行一个参数
  - multiline_parameters

  # 多行参数的括号应该在新的一行
  - multiline_arguments_brackets

  # 链式函数调用应该在同一行或者一行一个
  - multiline_function_chains

  # 数字、字典等集合，初始化的值要么全在同一行，要么[、]在单独的行
  - multiline_literal_brackets

  # 定义函数时，要所有参数在同一行，要么()占用单独行，参数对齐
  - multiline_parameters_brackets

  # 数字分割线。当在大量的小数中， 应该使用下划线来作为千分位分割线, 看起来没生效
  - number_separator

  # 操作符两边得有空格 如let a = 1+2是不合法的，+左右得有空格
  - operator_usage_whitespace

  # 在switch-case语句中, 建议不要将case中的let和var等关键字放到元祖内
  # https://juejin.cn/post/6844903576821727239#heading-9 参考75条
  - pattern_matching_keywords

  # delegate得增加weak弱引用，看起来没生效
  - weak_delegate

  # 调用多个参数函数时，如果多个参数换行，则要与第一个参数对齐
  - vertical_parameter_alignment_on_call

  # class属性应该指定变量类型，不合法示例：let a = 0
  - explicit_type_interface

  # 使用fatalError时，比如给错误信息。合法：fatalError("Foo")， 不合法fatalError()、fatalError("")
  - fatal_error_message

  # 使用.first(where:)代替.filter { }.first
  - first_where

  # 避免强制解包
  - force_unwrapping

  # 定义操作符函数只能是static函数， 比如 static func == (lhs: A, rhs: A) -> Bool {}
  - static_operator

  #首选初始化器而不是对象字面量, 例如不推荐：let image = #imageLiteral(resourceName: "image.jpg")、let color = ↓#colorLiteral(red: 0, green: 1, blue: 1, alpha: 1)
  - discouraged_object_literal

  # 枚举关联值的数量不能太多， warning: 5, error: 6
  - enum_case_associated_values_count

  # 所有声明必须指定访问级别：private、public、...
#  - explicit_acl

  # 类、枚举、结构体、协议、全局变量、全局函数等应该指定访问级别
#  - explicit_top_level_acl

  # 文件名规范：可以设置前缀、后缀等
  # - file_name

  # 默认值放到参数的末尾
  # - function_default_parameter_at_end

  # 比较两个相同的操作数，警告
  - identical_operands

  # 使用制表符或空格使代码格式化，可以配置多个参数
  # - indentation_width

  # .last(where:) over .filter { }.last
  - last_where

  # 判断一个数是否是另一个数的倍数，不要使用%取余判断
  - legacy_multiple

  # 修饰语的顺序要一致， override、dynamic、final、lazy ...
  - modifier_order

  # 禁止调用父类方法，可以配置
  # - prohibited_super_call

  # 将self重新绑定到一致的标识符名称。如f let self = self { }， 禁止：if let this = self { return }
  - self_binding

  # 对可选绑定使用简写语法, 如if let i {}， 禁止if let i = i {}
  - shorthand_optional_binding

  # 弱引用不要使用unowned， 如{ [unowned self] in _ }
  - unowned_variable_capture

  # 未使用的import需要删除
#  - unused_import

  # 在结束的括号前不要有空行，函数结束、定义的集合结束等
  - vertical_whitespace_closing_braces

  # 在开始的括号后不要有空行，函数结束、定义的集合开始等
  - vertical_whitespace_opening_braces

  # 常量文字应该放在比较操作符的右侧， 如if foo == 42 {}， 禁止if 42 == foo {}
  - yoda_condition

disabled_rules: # 禁止生效的规则
  # - trailing_whitespace # 行尾不能含有空格，有时候代码间增加空行会导致有空格也被检测到，因此忽略掉这个规则
  # - computed_accessors_order
  # - type_body_length

























